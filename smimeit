#!/usr/bin/env perl

##############################################################################
#                                                                            #
# Copyright 2011, Mike Cardwell - https://grepular.com/                      #
#                                                                            #
# This program is free software; you can redistribute it and/or modify       #
# it under the terms of the GNU General Public License as published by       #
# the Free Software Foundation; either version 2 of the License, or          #
# any later version.                                                         #
#                                                                            #
# This program is distributed in the hope that it will be useful,            #
# but WITHOUT ANY WARRANTY; without even the implied warranty of             #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              #
# GNU General Public License for more details.                               #
#                                                                            #
# You should have received a copy of the GNU General Public License          #
# along with this program; if not, write to the Free Software                #
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA #
#                                                                            #
##############################################################################

use strict;
use warnings;
use English;
use File::Spec::Functions 'catfile';
use File::Slurper 'read_text';
use Crypt::SMIME;
use MIME::Parser;

## Parse args
my $inline_flatten = 0;
my @recipients     = ();
{
    help() unless @ARGV;
    my @args = @ARGV;
    while (@args) {
        my $key = shift @args;
        if ( $key eq '--help' || $key eq '-h' ) {
            help();
        }
        elsif ( $key =~ /^.+\@.+$/ ) {
            push @recipients, $key;
        }
        else {
            die "Bad argument: $key\n";
        }
    }
    die "Missing recipients\n" unless @recipients;
}

## Set the home environment variable from the user running the script
$ENV{HOME} = ( getpwuid($>) )[7];

## Set the UID to match the EUID to prevent errors from GnuPG.
$REAL_USER_ID = $EFFECTIVE_USER_ID;

## Object for S/MIME encryption
my $smime = new Crypt::SMIME->new();

{
    my $certificate_directory  = catfile( $ENV{HOME}, ".smime-certificates" );
    my @recipient_certificates = ();
    foreach (@recipients) {
        push @recipient_certificates, read_text( catfile( $certificate_directory, $_ . ".pem" ) )
    }
    $smime->setPublicKey(@recipient_certificates);
}

## Make sure we have the appropriate public key for all recipients
# foreach( @recipients ){
#    unless( $gpg->has_public_key( $_ ) ){
#       while(<STDIN>){
#          print;
#       }
#       exit 0;
#    }
# }

## Read the plain text email
my $plain;
{
    local $/ = undef;
    $plain = <STDIN>;
}

## Parse the email
my $mime;
{
    my $parser = new MIME::Parser();
    $parser->decode_bodies(1);
    $parser->output_to_core(1);
    $mime = $parser->parse_data($plain);
}

## Test if it is already encrypted
if ( $smime->isEncrypted($plain) ) {
    $mime->head->add( 'X-Smimeit-Status', 'Already Encrypted' );
    print $plain;
    exit 0;
}

## Encrypt
my $encrypted;
{
    my $code;
    $mime->head->add( 'X-Smimeit-Status', 'Encrypted' );
    $encrypted = $smime->encrypt( $mime->stringify );
}

## Parse the encrypted email
my $encrypted_mime;
{
    my $parser = new MIME::Parser();
    $parser->decode_bodies(1);
    $parser->output_to_core(1);
    $encrypted_mime = $parser->parse_data($encrypted);
}

## Remove some headers which might have been broken by the process of encryption
$encrypted_mime->head()->delete($_)
  foreach qw( DKIM-Signature DomainKey-Signature );

## Print out the encrypted version
print $encrypted_mime->stringify;

sub help {
    print << "END_HELP";
Usage: smimeit.pl recipient1 recipient2

smimeit takes a list of email addresses as its arguments. The email is encrypted
using the public keys associated with those email addresses, as found in
\$HOME/.smime-certificates/example\@example.com.pem.

Optional arguments:

  --help or -h
END_HELP
    exit 0;
}
